"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[925],{5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(4334);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>w});var n=a(7462),r=a(7294),o=a(4334),l=a(2466),i=a(6550),s=a(1980),u=a(7392),d=a(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:r}}=e;return{value:t,label:a,attributes:n,default:r}}))}function p(e){const{values:t,children:a}=e;return(0,r.useMemo)((()=>{const e=t??c(a);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function b(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:a}=e;const n=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,s._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(n.location.search);t.set(o,e),n.replace({...n.location,search:t.toString()})}),[o,n])]}function m(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,o=p(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!b({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=a.find((e=>e.default))??a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:o}))),[s,u]=g({queryString:a,groupId:n}),[c,m]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,o]=(0,d.Nk)(a);return[n,(0,r.useCallback)((e=>{a&&o.set(e)}),[a,o])]}({groupId:n}),h=(()=>{const e=s??c;return b({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!b({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),m(e)}),[u,m,o]),tabValues:o}}var h=a(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),p=e=>{const t=e.currentTarget,a=d.indexOf(t),n=u[a].value;n!==i&&(c(t),s(n))},b=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const a=d.indexOf(e.currentTarget)+1;t=d[a]??d[0];break}case"ArrowLeft":{const a=d.indexOf(e.currentTarget)-1;t=d[a]??d[d.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:b,onClick:p},l,{className:(0,o.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":i===t})}),a??t)})))}function y(e){let{lazy:t,children:a,selectedValue:n}=e;const o=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===n));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function v(e){const t=m(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},r.createElement(f,(0,n.Z)({},e,t)),r.createElement(y,(0,n.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return r.createElement(v,(0,n.Z)({key:String(t)},e))}},441:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>m,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var n=a(7462),r=(a(7294),a(3905)),o=a(4464),l=a(4866),i=a(5162);const s={description:"This document goes over providing backtraces used for debugging potential issues with Budgie Desktop.",keywords:["budgie desktop","debugging budgie","backtraces"],title:"Providing Backtraces"},u=void 0,d={unversionedId:"developer/workflow/providing-backtraces",id:"developer/workflow/providing-backtraces",title:"Providing Backtraces",description:"This document goes over providing backtraces used for debugging potential issues with Budgie Desktop.",source:"@site/docs/developer/workflow/providing-backtraces.mdx",sourceDirName:"developer/workflow",slug:"/developer/workflow/providing-backtraces",permalink:"/developer/workflow/providing-backtraces",draft:!1,tags:[],version:"current",frontMatter:{description:"This document goes over providing backtraces used for debugging potential issues with Budgie Desktop.",keywords:["budgie desktop","debugging budgie","backtraces"],title:"Providing Backtraces"},sidebar:"developer",previous:{title:"Building Budgie Desktop",permalink:"/developer/workflow/building-budgie-desktop"},next:{title:"Writing Documentation",permalink:"/developer/meta/writing-documentation"}},c={},p=[{value:"Debug Symbols",id:"debug-symbols",level:2},{value:"GDB",id:"gdb",level:2},{value:"Generating a Backtrace",id:"generating-a-backtrace",level:2}],b={toc:p},g="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(g,(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'To ensure the best results and facilitate resolution when reporting segfaults, it is highly recommended that a backtrace be provided. A backtrace is "a summary of how your program got where it is. It shows one line per frame, for many frames, starting with the currently executing frame (frame zero), followed by its caller (frame one), and on up the stack".'),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_42.html#SEC43"},"Source: GDB Manual")),(0,r.kt)("p",null,"This document will provide instructions, some of which may be OS-specific, for generating a file containing the backtrace. Please note that you must have the debug symbols for Budgie Desktop installed on your system. This may already be the case if you built Budgie Desktop yourself, but we provide some OS-specific instructions below."),(0,r.kt)("h2",{id:"debug-symbols"},"Debug Symbols"),(0,r.kt)("p",null,"A debug symbol is a special kind of symbol that attaches additional information to the symbol table of an object file, such as a shared library or an executable. This information allows a symbolic debugger to gain access to information from the source code of the binary, such as the names of identifiers, including variables and routines."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Debug_symbol"},"Source: Wikipedia")),(0,r.kt)("p",null,"In the case of Budgie Desktop, this helps us identify various parts of the Budgie Desktop codebase across its range of components that may affect any issue that requires a backtrace."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{label:"Fedora",value:"Fedora",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"sudo dnf debuginfo-install budgie-desktop")),(0,r.kt)(i.Z,{label:"Solus",value:"Solus",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"sudo eopkg install budgie-desktop-dbginfo"))),(0,r.kt)("h2",{id:"gdb"},"GDB"),(0,r.kt)("p",null,"The GNU Project Debugger (GDB) is widely available across various Linux-based operating systems. We recommend using the instructions below for installing the debugger, though if you are familiar with the package manager of the operating system of your choice, typically the package is ",(0,r.kt)("inlineCode",{parentName:"p"},"gdb")," and you can install using your package manager's typical installation command(s)."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{label:"Arch",value:"arch",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"sudo pacman -S gdb")),(0,r.kt)(i.Z,{label:"Debian / Ubuntu",value:"debian-ubuntu",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"sudo apt install gdb")),(0,r.kt)(i.Z,{label:"Fedora",value:"Fedora",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"sudo dnf install gdb")),(0,r.kt)(i.Z,{label:"Solus",value:"Solus",mdxType:"TabItem"},(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"sudo eopkg install gdb"))),(0,r.kt)("h2",{id:"generating-a-backtrace"},"Generating a Backtrace"),(0,r.kt)("p",null,"First, replace your existing ",(0,r.kt)("inlineCode",{parentName:"p"},"budgie-panel")," with one managed by ",(0,r.kt)("inlineCode",{parentName:"p"},"gdb")," and pipe the output into the referenced file:"),(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"gdb budgie-panel 2&>1 | tee ~/budgie-panel-gdb.txt"),(0,r.kt)("p",null,"Once you're in ",(0,r.kt)("inlineCode",{parentName:"p"},"gdb"),", you will be presented with a prompt showing:"),(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"(gdb)"),(0,r.kt)("p",null,"Type the following, then press the ENTER / Return key. This should replace your Budgie panel(s)."),(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"r --replace"),(0,r.kt)("p",null,"Next, perform the actions required to cause the segfault. You should see something like ",(0,r.kt)("inlineCode",{parentName:"p"},'Thread 1 "budgie-panel" received signal SIGSEGV, Segmentation fault'),". Press Enter / Return and you should now see a ",(0,r.kt)("inlineCode",{parentName:"p"},"(gdb)")," prompt again."),(0,r.kt)("p",null,"Type the following, then press the ENTER / Return key. This may provide a considerable backtrace of content."),(0,r.kt)(o.Z,{language:"bash",mdxType:"CodeBlock"},"bt full"),(0,r.kt)("p",null,"Once it is done and you see the ",(0,r.kt)("inlineCode",{parentName:"p"},"(gdb)")," prompt, type quit and upload the txt file generated in the bug report. You bring back your budgie panel by opening a Terminal and typing ",(0,r.kt)("inlineCode",{parentName:"p"},"budgie-panel --replace &!")," then pressing ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl+D")," to detach from that process."))}m.isMDXComponent=!0}}]);